{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport CustomInput from \"../../components/CustomInput\";\nimport CustomButton from \"../../components/CustomButton\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport AwesomeAlert from \"react-native-awesome-alerts\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar URI = \"http://192.168.140.73:8000/api/isRegister\";\n\nvar ForgotPassWordScreen = function ForgotPassWordScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var myAlert = function myAlert() {\n    _jsx(AwesomeAlert, {\n      show: showAlert,\n      showProgress: false,\n      title: \"AwesomeAlert\",\n      message: \"I have a message for you!\",\n      closeOnTouchOutside: true,\n      closeOnHardwareBackPress: false,\n      showCancelButton: true,\n      showConfirmButton: true,\n      cancelText: \"No, cancel\",\n      confirmText: \"Yes, delete it\",\n      confirmButtonColor: \"#DD6B55\",\n      onCancelPressed: function onCancelPressed() {\n        _this.hideAlert();\n      },\n      onConfirmPressed: function onConfirmPressed() {\n        _this.hideAlert();\n      }\n    });\n  };\n\n  var onResetPassword = function onResetPassword() {\n    axios({\n      method: \"post\",\n      url: URI,\n      data: {\n        email: email\n      }\n    }).then(function (response) {\n      response.data.Resultat ? sessionStorage.setItem(\"codeReset\", JSON.stringify(response.data.Resultat)) : {};\n      response.data.Resultat ? navigation.navigate(\"NewPassWord\") : myAlert;\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  };\n\n  var onBackToSignInPress = function onBackToSignInPress() {\n    navigation.navigate(\"SignIn\");\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: styles.root,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Renvoyer le Mot de Passe\"\n      }), _jsx(CustomInput, {\n        placeholder: \"Email\",\n        value: email,\n        setValue: setEmail\n      }), _jsx(CustomButton, {\n        onPress: onResetPassword,\n        text: \"Réinitialiser le mot de passe\"\n      }), _jsx(CustomButton, {\n        onPress: onBackToSignInPress,\n        text: \"Retour à la connexion\",\n        type: \"TERTIARY\"\n      })]\n    })\n  });\n};\n\nexport default ForgotPassWordScreen;\nvar styles = StyleSheet.create({\n  root: {\n    padding: 10,\n    alignItems: \"center\",\n    backgroundColor: \"#f5b7b1\"\n  },\n  title: {\n    textTransform: \"uppercase\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    margin: 10\n  },\n  text: {\n    color: \"#fff\",\n    marginVertical: 10\n  },\n  link: {\n    color: \"salmon\"\n  }\n});","map":{"version":3,"names":["React","useState","CustomInput","CustomButton","useNavigation","AwesomeAlert","axios","URI","ForgotPassWordScreen","navigation","email","setEmail","myAlert","showAlert","hideAlert","onResetPassword","method","url","data","then","response","Resultat","sessionStorage","setItem","JSON","stringify","navigate","catch","error","console","log","onBackToSignInPress","styles","root","title","StyleSheet","create","padding","alignItems","backgroundColor","textTransform","fontSize","fontWeight","margin","text","color","marginVertical","link"],"sources":["/Applications/MAMP/htdocs/Projet_Orgabud/native/authentication/src/screens/ForgotPasswordScreen/ForgotPassWordScreen.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { View, Text, StyleSheet, ScrollView } from 'react-native'\nimport CustomInput from '../../components/CustomInput'\nimport CustomButton from '../../components/CustomButton'\nimport { useNavigation } from \"@react-navigation/native\";\nimport AwesomeAlert from \"react-native-awesome-alerts\";\nimport axios from \"axios\";\n\nconst URI = \"http://192.168.140.73:8000/api/isRegister\";\n\nconst ForgotPassWordScreen = () => {\n  const navigation = useNavigation();\n  const [email, setEmail] = useState(\"\");\n  const myAlert = () => {\n    <AwesomeAlert\n          show={showAlert}\n          showProgress={false}\n          title=\"AwesomeAlert\"\n          message=\"I have a message for you!\"\n          closeOnTouchOutside={true}\n          closeOnHardwareBackPress={false}\n          showCancelButton={true}\n          showConfirmButton={true}\n          cancelText=\"No, cancel\"\n          confirmText=\"Yes, delete it\"\n          confirmButtonColor=\"#DD6B55\"\n          onCancelPressed={() => {\n            this.hideAlert();\n          }}\n          onConfirmPressed={() => {\n            this.hideAlert();\n          }}\n        />\n  }\n  const onResetPassword = () => {\n    //Verification en bdd si l'email est existant en base de donnée.\n    axios({\n      method: \"post\",\n      url: URI,\n      data: {\n        email: email,\n      },\n    })\n      .then((response) => {\n        //Si l'email est en BDD je stocke le code dans la sessionStorage et j'envoie l'utilisateur vers la page de validation. sinon je renvois un message //TODOle placer en bdd plutot que dans la session et envoyer un mail à l'utilisateur contenant le code.\n        response.data.Resultat\n          ? sessionStorage.setItem(\n              \"codeReset\",\n              JSON.stringify(response.data.Resultat)\n            )\n          : {};\n        response.data.Resultat ? (\n          navigation.navigate(\"NewPassWord\")\n        ) : (\n          myAlert\n        );/* Alert.alert(\"non\"); */\n      })\n      .catch((error) => console.log(error));\n    \n  };\n\n  const onBackToSignInPress = () => {\n    navigation.navigate(\"SignIn\");\n  }\n\n  return (\n    <ScrollView>\n      <View style={styles.root}>\n        <Text style={styles.title}>Renvoyer le Mot de Passe</Text>\n\n        <CustomInput \n          placeholder={\"Email\"} \n          value={email} \n          setValue={setEmail} \n          />\n\n        <CustomButton onPress={onResetPassword} text={\"Réinitialiser le mot de passe\"} />\n\n        <CustomButton\n          onPress={onBackToSignInPress}\n          text={\"Retour à la connexion\"}\n          type=\"TERTIARY\"\n        />\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default ForgotPassWordScreen;\n\nconst styles = StyleSheet.create({\n  root: {\n    padding: 10,\n    alignItems: \"center\",\n    backgroundColor: \"#f5b7b1\",\n  },\n  title: {\n    textTransform: \"uppercase\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    margin: 10,\n  },\n  text: {\n    color: \"#fff\",\n    marginVertical: 10,\n  },\n  link: {\n    color: \"salmon\",\n  },\n});"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,WAAP;AACA,OAAOC,YAAP;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,IAAMC,GAAG,GAAG,2CAAZ;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;EACjC,IAAMC,UAAU,GAAGL,aAAa,EAAhC;;EACA,gBAA0BH,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOS,KAAP;EAAA,IAAcC,QAAd;;EACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;IACpB,KAAC,YAAD;MACM,IAAI,EAAEC,SADZ;MAEM,YAAY,EAAE,KAFpB;MAGM,KAAK,EAAC,cAHZ;MAIM,OAAO,EAAC,2BAJd;MAKM,mBAAmB,EAAE,IAL3B;MAMM,wBAAwB,EAAE,KANhC;MAOM,gBAAgB,EAAE,IAPxB;MAQM,iBAAiB,EAAE,IARzB;MASM,UAAU,EAAC,YATjB;MAUM,WAAW,EAAC,gBAVlB;MAWM,kBAAkB,EAAC,SAXzB;MAYM,eAAe,EAAE,2BAAM;QACrB,KAAI,CAACC,SAAL;MACD,CAdP;MAeM,gBAAgB,EAAE,4BAAM;QACtB,KAAI,CAACA,SAAL;MACD;IAjBP;EAmBD,CApBD;;EAqBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;IAE5BT,KAAK,CAAC;MACJU,MAAM,EAAE,MADJ;MAEJC,GAAG,EAAEV,GAFD;MAGJW,IAAI,EAAE;QACJR,KAAK,EAAEA;MADH;IAHF,CAAD,CAAL,CAOGS,IAPH,CAOQ,UAACC,QAAD,EAAc;MAElBA,QAAQ,CAACF,IAAT,CAAcG,QAAd,GACIC,cAAc,CAACC,OAAf,CACE,WADF,EAEEC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACF,IAAT,CAAcG,QAA7B,CAFF,CADJ,GAKI,EALJ;MAMAD,QAAQ,CAACF,IAAT,CAAcG,QAAd,GACEZ,UAAU,CAACiB,QAAX,CAAoB,aAApB,CADF,GAGEd,OAHF;IAKD,CApBH,EAqBGe,KArBH,CAqBS,UAACC,KAAD;MAAA,OAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX;IAAA,CArBT;EAuBD,CAzBD;;EA2BA,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;IAChCtB,UAAU,CAACiB,QAAX,CAAoB,QAApB;EACD,CAFD;;EAIA,OACE,KAAC,UAAD;IAAA,UACE,MAAC,IAAD;MAAM,KAAK,EAAEM,MAAM,CAACC,IAApB;MAAA,WACE,KAAC,IAAD;QAAM,KAAK,EAAED,MAAM,CAACE,KAApB;QAAA;MAAA,EADF,EAGE,KAAC,WAAD;QACE,WAAW,EAAE,OADf;QAEE,KAAK,EAAExB,KAFT;QAGE,QAAQ,EAAEC;MAHZ,EAHF,EASE,KAAC,YAAD;QAAc,OAAO,EAAEI,eAAvB;QAAwC,IAAI,EAAE;MAA9C,EATF,EAWE,KAAC,YAAD;QACE,OAAO,EAAEgB,mBADX;QAEE,IAAI,EAAE,uBAFR;QAGE,IAAI,EAAC;MAHP,EAXF;IAAA;EADF,EADF;AAqBD,CA5ED;;AA8EA,eAAevB,oBAAf;AAEA,IAAMwB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;EAC/BH,IAAI,EAAE;IACJI,OAAO,EAAE,EADL;IAEJC,UAAU,EAAE,QAFR;IAGJC,eAAe,EAAE;EAHb,CADyB;EAM/BL,KAAK,EAAE;IACLM,aAAa,EAAE,WADV;IAELC,QAAQ,EAAE,EAFL;IAGLC,UAAU,EAAE,MAHP;IAILC,MAAM,EAAE;EAJH,CANwB;EAY/BC,IAAI,EAAE;IACJC,KAAK,EAAE,MADH;IAEJC,cAAc,EAAE;EAFZ,CAZyB;EAgB/BC,IAAI,EAAE;IACJF,KAAK,EAAE;EADH;AAhByB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}