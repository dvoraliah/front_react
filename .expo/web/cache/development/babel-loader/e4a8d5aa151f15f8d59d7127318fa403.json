{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport CustomInput from \"../../components/CustomInput\";\nimport CustomButton from \"../../components/CustomButton\";\nimport Checkbox from \"expo-checkbox\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { API } from \"../../services/env\";\nimport axios from \"axios\";\nimport CustomRedirectAlert from \"../../components/CustomRedirectAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar NewEntryBudgetScreen = function NewEntryBudgetScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isChecked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate;\n    setDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    DateTimePickerAndroid.open({\n      value: date,\n      onChange: onChange,\n      mode: currentMode,\n      is24Hour: true\n    });\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode(\"date\");\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode(\"time\");\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Formulaire de nouvelle entr\\xE9e budget\"\n      }), _jsx(CustomInput, {\n        placeholder: \"Nom du Champs\",\n        value: \"\",\n        setValue: \"\"\n      }), _jsx(CustomInput, {\n        placeholder: \"Montant\",\n        value: \"\",\n        setValue: \"\"\n      }), _jsx(CustomInput, {\n        placeholder: \"Date de dépense\",\n        value: \"\",\n        setValue: \"\"\n      }), _jsx(CustomInput, {\n        placeholder: \"Date prévue de débit\",\n        value: \"\",\n        setValue: \"\"\n      }), _jsx(Checkbox, {\n        style: \"\",\n        value: isChecked,\n        onValueChange: setChecked,\n        color: isChecked ? \"green\" : undefined\n      }), _jsx(Text, {\n        children: \"D\\xE9bit\\xE9\"\n      }), _jsx(CustomButton, {\n        onPress: \"\",\n        text: \"Ajouter au budget\"\n      }), _jsx(CustomButton, {\n        onPress: \"\",\n        text: \"Retour à la connexion\",\n        type: \"TERTIARY\"\n      })]\n    })\n  });\n};\n\nexport default NewEntryBudgetScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useState","CustomInput","CustomButton","Checkbox","DateTimePicker","useNavigation","API","axios","CustomRedirectAlert","NewEntryBudgetScreen","isChecked","setChecked","onChange","event","selectedDate","currentDate","setDate","showMode","currentMode","DateTimePickerAndroid","open","value","date","mode","is24Hour","showDatepicker","showTimepicker","undefined","styles","StyleSheet","create"],"sources":["/Applications/MAMP/htdocs/Projet_Orgabud/authentication/src/screens/NewEntryBudgetScreen/NewEntryBudgetScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { View, Text, StyleSheet, ScrollView, Alert } from \"react-native\";\nimport CustomInput from \"../../components/CustomInput\";\nimport CustomButton from \"../../components/CustomButton\";\nimport Checkbox from \"expo-checkbox\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { API } from \"../../services/env\";\nimport axios from \"axios\";\nimport CustomRedirectAlert from \"../../components/CustomRedirectAlert\";\n\nconst NewEntryBudgetScreen = () => {\n    const [isChecked, setChecked] = useState(false);\n    const onChange = (event, selectedDate) => {\n      const currentDate = selectedDate;\n      setDate(currentDate);\n    };\n    const showMode = (currentMode) => {\n      DateTimePickerAndroid.open({\n        value: date,\n        onChange,\n        mode: currentMode,\n        is24Hour: true,\n      });\n    };\n\n    const showDatepicker = () => {\n      showMode(\"date\");\n    };\n\n    const showTimepicker = () => {\n      showMode(\"time\");\n    };\n    return (\n      <ScrollView>\n        <View>\n          <Text>Formulaire de nouvelle entrée budget</Text>\n          <CustomInput placeholder={\"Nom du Champs\"} value={\"\"} setValue={\"\"} />\n          <CustomInput placeholder={\"Montant\"} value={\"\"} setValue={\"\"} />\n          <CustomInput\n            placeholder={\"Date de dépense\"}\n            value={\"\"}\n            setValue={\"\"}\n          />\n          <CustomInput\n            placeholder={\"Date prévue de débit\"}\n            value={\"\"}\n            setValue={\"\"}\n          />\n\n          <Checkbox\n            style={\"\"}\n            value={isChecked}\n            onValueChange={setChecked}\n            color={isChecked ? \"green\" : undefined}\n          />\n          <Text>Débité</Text>\n          <CustomButton onPress={\"\"} text={\"Ajouter au budget\"} />\n\n          <CustomButton\n            onPress={\"\"}\n            text={\"Retour à la connexion\"}\n            type=\"TERTIARY\"\n          />\n        </View>\n      </ScrollView>\n    );\n}\n\nexport default NewEntryBudgetScreen\n\nconst styles = StyleSheet.create({})\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,OAAOC,WAAP;AACA,OAAOC,YAAP;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,GAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP;;;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;EAC/B,gBAAgCT,QAAQ,CAAC,KAAD,CAAxC;EAAA;EAAA,IAAOU,SAAP;EAAA,IAAkBC,UAAlB;;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,YAAR,EAAyB;IACxC,IAAMC,WAAW,GAAGD,YAApB;IACAE,OAAO,CAACD,WAAD,CAAP;EACD,CAHD;;EAIA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,WAAD,EAAiB;IAChCC,qBAAqB,CAACC,IAAtB,CAA2B;MACzBC,KAAK,EAAEC,IADkB;MAEzBV,QAAQ,EAARA,QAFyB;MAGzBW,IAAI,EAAEL,WAHmB;MAIzBM,QAAQ,EAAE;IAJe,CAA3B;EAMD,CAPD;;EASA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3BR,QAAQ,CAAC,MAAD,CAAR;EACD,CAFD;;EAIA,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3BT,QAAQ,CAAC,MAAD,CAAR;EACD,CAFD;;EAGA,OACE,KAAC,UAAD;IAAA,UACE,MAAC,IAAD;MAAA,WACE,KAAC,IAAD;QAAA;MAAA,EADF,EAEE,KAAC,WAAD;QAAa,WAAW,EAAE,eAA1B;QAA2C,KAAK,EAAE,EAAlD;QAAsD,QAAQ,EAAE;MAAhE,EAFF,EAGE,KAAC,WAAD;QAAa,WAAW,EAAE,SAA1B;QAAqC,KAAK,EAAE,EAA5C;QAAgD,QAAQ,EAAE;MAA1D,EAHF,EAIE,KAAC,WAAD;QACE,WAAW,EAAE,iBADf;QAEE,KAAK,EAAE,EAFT;QAGE,QAAQ,EAAE;MAHZ,EAJF,EASE,KAAC,WAAD;QACE,WAAW,EAAE,sBADf;QAEE,KAAK,EAAE,EAFT;QAGE,QAAQ,EAAE;MAHZ,EATF,EAeE,KAAC,QAAD;QACE,KAAK,EAAE,EADT;QAEE,KAAK,EAAEP,SAFT;QAGE,aAAa,EAAEC,UAHjB;QAIE,KAAK,EAAED,SAAS,GAAG,OAAH,GAAaiB;MAJ/B,EAfF,EAqBE,KAAC,IAAD;QAAA;MAAA,EArBF,EAsBE,KAAC,YAAD;QAAc,OAAO,EAAE,EAAvB;QAA2B,IAAI,EAAE;MAAjC,EAtBF,EAwBE,KAAC,YAAD;QACE,OAAO,EAAE,EADX;QAEE,IAAI,EAAE,uBAFR;QAGE,IAAI,EAAC;MAHP,EAxBF;IAAA;EADF,EADF;AAkCH,CAxDD;;AA0DA,eAAelB,oBAAf;AAEA,IAAMmB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf"},"metadata":{},"sourceType":"module"}